import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

from ark.phenotyping.post_cluster_utils import plot_hist_thresholds, create_mantis_project
from ark.utils.io_utils import list_folders


# This file takes the cell table generated by Pixie and performs preprocessing and aggregation to facilitate easier plotting

data_dir = '/Users/noahgreenwald/Documents/Grad_School/Lab/TNBC/Data/'
cell_table = pd.read_csv(os.path.join(data_dir, 'combined_cell_table_normalized_cell_labels.csv'))

x = ['CD11c_HLADR', 'CD14', 'CD163', 'CD20', 'CD31', 'CD31_VIM', 'CD3_DN', 'CD3_noise_split',
     'CD45', 'CD4T', 'CD4T_CD8T_dp', 'CD4T_HLADR', 'CD4_mono', 'CD56', 'CD68', 'CD68_CD163_DP', 'CD8T',
     'CD8_CD8Tdim', 'ChyTry', 'FAP', 'FAP_SMA', 'FOXP3_CD45_split', 'SMA', 'Treg', 'VIM',
     'calprotectin', 'cd56_dirty', 'ck17_tumor', 'ecad_hladr', 'ecad_vim', 'noise',
     'other_stroma_coll','other_stroma_fibronectin', 'tumor_CD56', 'tumor_ecad', 'tumor_other_mono']


plot_hist_thresholds(cell_table=cell_table, populations=['tumor_ecad', 'tumor_other','VIM'],marker='ECAD', threshold=0.005)

# create CD4+ cells from CD3_noise population
marker = 'CD4'
threshold = 0.001
target_pop = 'CD3_noise_split'
new_pop = 'CD3_noise_CD4s'
selected_idx = cell_table[marker] > threshold
cell_table.loc[np.logical_and(cell_table['cell_meta_cluster'] == target_pop, selected_idx), 'cell_meta_cluster'] = new_pop

# create CD3 DN cells from CD3_noise population
marker = 'CD3'
threshold = 0.0005
target_pop = 'CD3_noise_split'
new_pop = 'CD3_noise_CD3DN'
selected_idx = cell_table[marker] > threshold
cell_table.loc[np.logical_and(cell_table['cell_meta_cluster'] == target_pop, selected_idx), 'cell_meta_cluster'] = new_pop

# remove negative cells from chytry population
marker = 'ChyTr'
threshold = 0.01
target_pop = 'ChyTry'
new_pop = 'ChyTry_neg'
selected_idx = cell_table[marker] < threshold
cell_table.loc[np.logical_and(cell_table['cell_meta_cluster'] == target_pop, selected_idx), 'cell_meta_cluster'] = new_pop

# remove negative cells from calprotectin population
marker = 'Calprotectin'
threshold = 0.001
target_pop = 'calprotectin'
new_pop = 'calprotectin_neg'
selected_idx = cell_table[marker] < threshold
cell_table.loc[np.logical_and(cell_table['cell_meta_cluster'] == target_pop, selected_idx), 'cell_meta_cluster'] = new_pop

# remove negative cells from CD56_dirty
marker = 'CD56'
threshold = 0.001
target_pop = 'cd56_dirty'
new_pop = 'cd56_dirty_neg'
selected_idx = cell_table[marker] < threshold
cell_table.loc[np.logical_and(cell_table['cell_meta_cluster'] == target_pop, selected_idx), 'cell_meta_cluster'] = new_pop

# get immune cells from noise category
marker = 'CD45'
threshold = 0.001
target_pop = 'noise'
new_pop = 'noise_cd45_pos'
selected_idx = cell_table[marker] > threshold
cell_table.loc[np.logical_and(cell_table['cell_meta_cluster'] == target_pop, selected_idx), 'cell_meta_cluster'] = new_pop

# remove negative cells from CK17
marker = 'CK17'
threshold = 0.001
target_pop = 'ck17_tumor'
new_pop = 'ck17_tumor_neg'
selected_idx = cell_table[marker] < threshold
cell_table.loc[np.logical_and(cell_table['cell_meta_cluster'] == target_pop, selected_idx), 'cell_meta_cluster'] = new_pop

# create CD4+ cells from CD3_DN population
marker = 'CD4'
threshold = 0.001
target_pop = 'CD3_DN'
new_pop = 'CD3_DN_CD4'
selected_idx = cell_table[marker] > threshold
cell_table.loc[np.logical_and(cell_table['cell_meta_cluster'] == target_pop, selected_idx), 'cell_meta_cluster'] = new_pop

# create CD8+ cells from CD3_DN population
marker = 'CD8'
threshold = 0.001
target_pop = 'CD3_DN'
new_pop = 'CD3_DN_CD8'
selected_idx = cell_table[marker] > threshold
cell_table.loc[np.logical_and(cell_table['cell_meta_cluster'] == target_pop, selected_idx), 'cell_meta_cluster'] = new_pop

# remove negs cells from CD3_DN population
marker = 'CD3'
threshold = 0.0005
target_pop = 'CD3_DN'
new_pop = 'CD3_DN_noise'
selected_idx = cell_table[marker] < threshold
cell_table.loc[np.logical_and(cell_table['cell_meta_cluster'] == target_pop, selected_idx), 'cell_meta_cluster'] = new_pop

# remove other cells from CD8_CD8T_dim population
marker = 'CD8'
threshold = 0.001
target_pop = 'CD8_CD8Tdim'
new_pop = 'CD8_CD8Tdim_other'
selected_idx = cell_table[marker] < threshold
cell_table.loc[np.logical_and(cell_table['cell_meta_cluster'] == target_pop, selected_idx), 'cell_meta_cluster'] = new_pop

# remove CD68 neg cells from CD68_CD163_DP population
marker = 'CD68'
threshold = 0.001
target_pop = 'CD68_CD163_DP'
new_pop = 'CD68_CD163_DP_68neg'
selected_idx = cell_table[marker] < threshold
cell_table.loc[np.logical_and(cell_table['cell_meta_cluster'] == target_pop, selected_idx), 'cell_meta_cluster'] = new_pop

# remove myoepethelial cells from SMA cluster
marker = 'ECAD'
threshold = 0.001
target_pop = 'SMA'
new_pop = 'SMA_ECAD'
selected_idx = cell_table[marker] > threshold
cell_table.loc[np.logical_and(cell_table['cell_meta_cluster'] == target_pop, selected_idx), 'cell_meta_cluster'] = new_pop


# remove non-immune cells from CD45_FOXP3 cluster
marker = 'CD45'
threshold = 0.001
target_pop = 'FOXP3_CD45_split'
new_pop = 'FOXP3_CD45_split_pos'
selected_idx = cell_table[marker] > threshold
cell_table.loc[np.logical_and(cell_table['cell_meta_cluster'] == target_pop, selected_idx), 'cell_meta_cluster'] = new_pop


# find ecad_sma positive cells in ecad
marker = 'SMA'
threshold = 0.01
target_pop = 'tumor_ecad'
new_pop = 'tumor_ecad_sma'
selected_idx = cell_table[marker] > threshold
cell_table.loc[np.logical_and(cell_table['cell_meta_cluster'] == target_pop, selected_idx), 'cell_meta_cluster'] = new_pop

# find ecad_sma positive cells in ck17
marker = 'SMA'
threshold = 0.01
target_pop = 'ck17_tumor'
new_pop = 'ck17_tumor_sma'
selected_idx = cell_table[marker] > threshold
cell_table.loc[np.logical_and(cell_table['cell_meta_cluster'] == target_pop, selected_idx), 'cell_meta_cluster'] = new_pop


# find VIM+ tumor cells
pops = ['tumor_CD56', 'ck17_tumor', 'tumor_ecad', 'tumor_other','tumor_other_mono']
marker = 'Vim'
threshold = 0.005
new_pop = 'tumor_vim'
selected_idx = cell_table[marker] > threshold
cell_table.loc[np.logical_and(np.isin(cell_table['cell_meta_cluster'], pops), selected_idx), 'cell_meta_cluster'] = new_pop



# update cell table with post-inspection decisions
cell_table.loc[cell_table['cell_meta_cluster'] == 'noise', 'cell_meta_cluster'] = 'tumor_other'
cell_table.loc[cell_table['cell_meta_cluster'] == 'CD8_CD8Tdim', 'cell_meta_cluster'] = 'CD8T'
cell_table.loc[cell_table['cell_meta_cluster'] == 'noise_cd45_pos', 'cell_meta_cluster'] = 'immune_other'
cell_table.loc[cell_table['cell_meta_cluster'] == 'CD45', 'cell_meta_cluster'] = 'immune_other'
cell_table.loc[cell_table['cell_meta_cluster'] == 'ecad_hladr',  'cell_meta_cluster'] = 'tumor_other_mono'
cell_table.loc[cell_table['cell_meta_cluster'] == 'CD8_CD8Tdim_other', 'cell_meta_cluster'] = 'tumor_other'
cell_table.loc[cell_table['cell_meta_cluster'] == 'CD3_noise_CD4s', 'cell_meta_cluster'] = 'CD4T'
cell_table.loc[cell_table['cell_meta_cluster'] == 'CD3_noise_CD3DN', 'cell_meta_cluster'] = 'immune_other'
cell_table.loc[cell_table['cell_meta_cluster'] == 'CD3_noise_split', 'cell_meta_cluster'] = 'other'
cell_table.loc[cell_table['cell_meta_cluster'] == 'ChyTry_neg', 'cell_meta_cluster'] = 'other'
cell_table.loc[cell_table['cell_meta_cluster'] == 'CD3_DN_CD4', 'cell_meta_cluster'] = 'CD4T'
cell_table.loc[cell_table['cell_meta_cluster'] == 'CD3_DN_CD8', 'cell_meta_cluster'] = 'CD8T'
cell_table.loc[cell_table['cell_meta_cluster'] == 'cd56_dirty', 'cell_meta_cluster'] = 'tumor_CD56'
cell_table.loc[cell_table['cell_meta_cluster'] == 'CD3_DN_noise', 'cell_meta_cluster'] = 'immune_other'
cell_table.loc[cell_table['cell_meta_cluster'] == 'cd56_dirty_neg', 'cell_meta_cluster'] = 'tumor_other'
cell_table.loc[cell_table['cell_meta_cluster'] == 'ck17_tumor_neg', 'cell_meta_cluster'] = 'tumor_ecad'
cell_table.loc[cell_table['cell_meta_cluster'] == 'calprotectin_neg', 'cell_meta_cluster'] = 'other'
cell_table.loc[cell_table['cell_meta_cluster'] == 'FOXP3_CD45_split_pos', 'cell_meta_cluster'] = 'CD45'
cell_table.loc[cell_table['cell_meta_cluster'] == 'CD68_CD163_DP_68neg', 'cell_meta_cluster'] = 'CD163'
cell_table.loc[cell_table['cell_meta_cluster'] == 'FOXP3_CD45_split', 'cell_meta_cluster'] = 'other'
cell_table.loc[cell_table['cell_meta_cluster'] == 'tumor_ecad_sma', 'cell_meta_cluster'] = 'tumor_sma'
cell_table.loc[cell_table['cell_meta_cluster'] == 'SMA_ECAD', 'cell_meta_cluster'] = 'tumor_sma'
cell_table.loc[cell_table['cell_meta_cluster'] == 'ck17_tumor_sma', 'cell_meta_cluster'] = 'tumor_sma'

fovs = list_folders('/Users/noahgreenwald/Documents/Grad_School/Lab/TNBC/example_output/mantis')


create_mantis_project(cell_table, fovs=fovs, seg_dir='/Users/noahgreenwald/Documents/Grad_School/Lab/TNBC/example_output/segmentation_masks',
                      pop_col='cell_meta_cluster', mask_dir='/Users/noahgreenwald/Documents/Grad_School/Lab/TNBC/example_output/masks',
                      image_dir='/Users/noahgreenwald/Documents/Grad_School/Lab/TNBC/example_output/mantis',
                      mantis_dir='/Users/noahgreenwald/Documents/Grad_School/Lab/TNBC/example_output/mantis')

# generate consistent names for clusters: Tumor -> Cancer, and capitalize all names for plotting
replacements = [('tumor_other', 'Cancer_Other'),
                ('ck17_tumor', 'Cancer_CK17'),
                ('ecad_vim', 'Cancer_Vim'),
                ('tumor_ecad', 'Cancer_Ecad'),
                ('tumor_other_mono', 'Cancer_Mono'),
                ('tumor_sma', 'Cancer_SMA'),
                ('tumor_CD56', 'Cancer_CD56'),
                ('CD4_mono', 'CD4_Mono'),
                ('CD4T_CD8T_dp', 'CD4T_CD8T_DP'),
                ('ChyTry', 'Mast'),
                ('calprotectin', 'Neutrophil'),
                ('immune_other', 'Immune_Other'),
                ('other', 'Other'),
                ('other_stroma_coll', 'Stroma_Collagen'),
                ('other_stroma_fibronectin', 'Stroma_Fibronectin')]

for old_name, new_name in replacements:
    cell_table = cell_table.replace({'cell_meta_cluster': old_name},
                                    {'cell_meta_cluster': new_name})

all_clusters = ['CD11c_HLADR', 'CD14', 'CD163', 'CD20', 'CD31', 'CD31_VIM',
                'CD3_DN', 'CD4T', 'CD4T_CD8T_DP', 'CD4T_HLADR', 'CD4_Mono', 'CD56',
                'CD68', 'CD68_CD163_DP', 'CD8T', 'Cancer_CD56', 'Cancer_CK17',
                'Cancer_Ecad', 'Cancer_Mono', 'Cancer_Other', 'Cancer_SMA',
                'Cancer_Vim', 'FAP', 'FAP_SMA', 'Immune_Other', 'Mast',
                'Neutrophil', 'Other', 'SMA', 'Stroma_Collagen',
                'Stroma_Fibronectin', 'Treg', 'VIM']

assignment_dict = {'Cancer': ['Cancer_CD56', 'Cancer_CK17', 'Cancer_Ecad'],
                   'Cancer_EMT': ['Cancer_SMA', 'Cancer_Vim'],
                   'Cancer_Other': ['Cancer_Other', 'Cancer_Mono'],
                   'M1_Mac': ['CD68'],
                   'M2_Mac': ['CD163'],
                   'Mac_Other': ['CD68_CD163_DP'],
                   'Monocyte': ['CD4_Mono', 'CD14'],
                   'APC': ['CD11c_HLADR'],
                   'B':  ['CD20'],
                   'Endothelium': ['CD31', 'CD31_VIM'],
                   'Fibroblast': ['FAP', 'FAP_SMA', 'SMA'],
                   'Stroma': ['Stroma_Collagen', 'Stroma_Fibronectin', 'VIM'],
                   'NK': ['CD56'],
                   'Neutrophil': ['Neutrophil'],
                   'Mast': ['Mast'],
                   'CD4T': ['CD4T','CD4T_HLADR'],
                   'CD8T': ['CD8T'],
                   'Treg': ['Treg'],
                   'T_Other': ['CD3_DN','CD4T_CD8T_DP'],
                   'Immune_Other': ['Immune_Other'],
                   'Other': ['Other']}

for new_name in assignment_dict:
    pops = assignment_dict[new_name]
    idx = np.isin(cell_table['cell_meta_cluster'].values, pops)
    cell_table.loc[idx,  'cell_cluster'] = new_name

assignment_dict_2 = {'Cancer': ['Cancer', 'Cancer_EMT', 'Cancer_Other'],
                     'Mono_Mac': ['M1_Mac', 'M2_Mac', 'Mac_Other', 'Monocyte', 'APC'],
                     'B': ['B'],
                     'T': ['CD4T', 'CD8T', 'Treg', 'T_Other'],
                     'Granulocyte': ['Neutrophil', 'Mast'],
                     'Stroma': ['Endothelium', 'Fibroblast', 'Stroma'],
                     'NK': ['NK'],
                     'Other': ['Immune_Other', 'Other']}

for new_name in assignment_dict_2:
    pops = assignment_dict_2[new_name]
    idx = np.isin(cell_table['cell_cluster'].values, pops)
    cell_table.loc[idx,  'cell_cluster_broad'] = new_name

# save updated cell table
cell_table.to_csv('/Users/noahgreenwald/Documents/Grad_School/Lab/TNBC/Data/combined_cell_table_normalized_cell_labels_updated.csv', index=False)
cell_table = pd.read_csv('/Users/noahgreenwald/Documents/Grad_School/Lab/TNBC/Data/combined_cell_table_normalized_cell_labels_updated.csv')


# functional marker thresholding

threshold_list = [['Ki67', 0.002], ['CD38', 0.004], ['CD45RB', 0.001], ['CD45RO', 0.002],
                  ['CD57', 0.002], ['CD69', 0.002], ['GLUT1', 0.002], ['IDO', 0.001],
                  ['PD1', 0.0005], ['PDL1', 0.001],
                  ['HLA1', 0.001], ['HLADR', 0.001], ['TBET', 0.0015], ['TCF1', 0.001],
                  ['TIM3', 0.001]]

for marker, threshold in threshold_list:
    cell_table[marker + '_threshold'] = cell_table[marker].values >= threshold


# set specific threshold for PDL1+ dim tumor cells
PDL1_mask = np.logical_and(cell_table['PDL1'].values >= 0.0005, cell_table['PDL1'].values < 0.001)
tumor_mask = cell_table['cell_cluster_broad'] == 'Cancer'

cell_table['PDL1_cancer_dim_threshold'] = np.logical_and(PDL1_mask, tumor_mask)

# set specific threshold for all PDL1+ cells
cell_table['PDL1_combined_threshold'] = np.logical_or(cell_table['PDL1_threshold'].values, cell_table['PDL1_cancer_dim_threshold'].values)

# define marker combinations of interest
combinations = [[('PD1', True), ('TCF1', True)],
                [('PD1', True), ('TIM3', True)],
                [('PD1', True), ('CD69', True)],
                [('PDL1', True), ('TIM3', True)],
                [('TBET', True), ('TCF1', True)],
                [('TBET', True), ('CD69', True)],
                [('CD45RO', True), ('CD69', True)]
                ]

for combo in combinations:
    first_marker, first_bool = combo[0]
    base_mask = cell_table[first_marker].array
    if not first_bool:
        base_mask = ~base_mask
    for marker, bool in combo[1:]:
        base_mask = np.logical_and(base_mask, cell_table[marker].array)
        if not bool:
            base_mask = ~base_mask
    name = '_'.join([tuple[0] for tuple in combo]) + '_threshold'
    cell_table[name] = base_mask

# create ratios of relevant markers
cell_table['H3K9ac_H3K27me3_ratio'] = np.log2(cell_table['H3K9ac'].values / cell_table['H3K27me3'].values)
cell_table['CD45RO_CD45RB_ratio'] = np.log2(cell_table['CD45RO'].values / cell_table['CD45RB'].values)

cell_table.to_csv('/Users/noahgreenwald/Documents/Grad_School/Lab/TNBC/Data/combined_cell_table_normalized_cell_labels_updated.csv', index=False)
cell_table = pd.read_csv('/Users/noahgreenwald/Documents/Grad_School/Lab/TNBC/Data/combined_cell_table_normalized_cell_labels_updated.csv')


#
# Create consolidated version of cell table with populations of interest for fast processing
#

# create consolidated cell table with only cell populations
cell_table_clusters = cell_table.loc[:, ['fov', 'label', 'cell_meta_cluster', 'cell_cluster', 'cell_cluster_broad']]
cell_table_clusters.to_csv(os.path.join(data_dir, 'combined_cell_table_normalized_cell_labels_updated_clusters_only.csv'),
                  index=False)

# create consolidated cell table with only functional marker freqs
func_cols = [col for col in cell_table.columns if '_threshold' in col]
cell_table_func = cell_table.loc[:, ['fov', 'label', 'cell_cluster_broad', 'cell_cluster', 'cell_meta_cluster', 'H3K9ac_H3K27me3_ratio', 'CD45RO_CD45RB_ratio'] + func_cols]
cell_table_func.columns = [col.split('_threshold')[0] for col in cell_table_func.columns]
cell_table_func.to_csv(os.path.join(data_dir, 'combined_cell_table_normalized_cell_labels_updated_functional_only.csv'),
                       index=False)

# mike_table = cell_table.loc[:, ['fov', 'label', 'cell_cluster_broad', 'cell_cluster', 'cell_meta_cluster', 'H3K9ac_H3K27me3_ratio', 'CD45RO_CD45RB_ratio'] + chans + func_cols]
# chans = ['PDL1', 'HLA1', 'CD4', 'CD8', 'H3K9ac', 'H3K27me3', 'ECAD', 'CK17', 'Vim']
# mike_table = pd.merge(mike_table, harmonized_metadata, on='fov', how='left')
# mike_table.to_csv(os.path.join(data_dir, 'combined_cell_table_only_mike.csv'), index=False)

# code for setting thresholds for functional markers
# test_fovs = cell_table.fov.unique()
# np.random.shuffle(test_fovs)
# test_fovs = test_fovs[:30]
# test_fovs = [fov for fov in test_fovs if 'TMA2_' not in fov]
# test_fovs = [fov for fov in test_fovs if  not in fov]
#
# remove_fovs = ['TONIC_TMA5_R9C4', 'TONIC_TMA10_R10C2', 'TONIC_TMA18_R2C3']
# test_fovs = [fov for fov in test_fovs if fov not in remove_fovs]
#
# cell_table_testing = cell_table.loc[cell_table['fov'].isin(test_fovs), :]
# # create dataframe with counts of the specified markers
# marker_counts_df = cell_table_testing.loc[:, ['fov', 'label'] + ['CD38']]
#
# # save dataframe
# marker_counts_df.to_csv('/Volumes/Shared/Noah Greenwald/TONIC_Cohort/mantis_dir/mantis_folders/marker_counts.csv', index=False)
#



# determine number of cells per image
cell_counts = cell_table.groupby('fov').count()['label'].reset_index()

# sort by number of cells
cell_counts = cell_counts.sort_values('label', ascending=True)

# create histogram of number of cells per image
sns.histplot(cell_counts.loc[cell_counts.label < 5000, 'label'], bins=50)

io.imshow(os.path.join('/Volumes/Shared/Noah Greenwald/TONIC_Cohort/image_data/samples', 'TONIC_TMA9_R8C2/H3K27me3.tiff'))